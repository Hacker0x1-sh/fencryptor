import * as PDFDocument from 'pdfkit';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';

export interface ReportData {
  operation: 'encrypt' | 'decrypt';
  targetPath: string;
  affectedFiles: string[];
  timestamp: Date;
  logEntries: string[];
  executionTime: number; // Added: Time taken in seconds
}

export function generatePDFReport(data: ReportData, toolDir: string): string {
  const timestamp = data.timestamp.toISOString().replace(/[:.]/g, '-').split('.')[0];
  const folderName = `report-${timestamp}`;
  const reportFolder = path.join(toolDir, folderName);
  const pdfFilename = `fencryptor-report.pdf`;
  const logFilename = `fencryptor-report.log`;
  const infoFilename = `README.txt`;

  if (!fs.existsSync(reportFolder)) {
    fs.mkdirSync(reportFolder, { recursive: true });
  }

  const pdfPath = path.join(reportFolder, pdfFilename);
  const doc = new PDFDocument({
    margin: 40,
    info: {
      Title: 'Fencryptor Operation Report',
      Author: 'HKHackerCloud - Kris , Ho Kai Chun',
      Subject: `${data.operation} Operation Report`,
      CreationDate: data.timestamp
    }
  });
  doc.pipe(fs.createWriteStream(pdfPath));

  // Header
  doc.font('Helvetica-Bold').fontSize(24).fillColor('#2E2E2E')
    .text('Fencryptor Operation Report', { align: 'center' });
  doc.moveDown(0.5);
  doc.font('Helvetica').fontSize(12).fillColor('#666666')
    .text(`Generated: ${data.timestamp.toLocaleString()}`, { align: 'center' });
  doc.moveTo(40, 110).lineTo(570, 110).stroke('#D3D3D3');
  doc.moveDown(1);

  // Summary Section
  doc.font('Helvetica-Bold').fontSize(14).fillColor('#2E2E2E')
    .text('Summary', { underline: true });
  doc.font('Helvetica').fontSize(11).fillColor('#333333');
  doc.moveDown(0.5);
  doc.text(`Operation Type: ${data.operation.toUpperCase()}`);
  doc.text(`Target Path: ${data.targetPath}`);
  doc.text(`Total Files Processed: ${data.affectedFiles.length}`);
  doc.text(`Execution Time: ${data.executionTime.toFixed(2)} seconds`);
  doc.text(`User: ${os.userInfo().username}`);
  doc.text(`System: ${os.platform()} ${os.release()}`);
  doc.text(`Tool Directory: ${toolDir}`);
  doc.moveDown(1);

  // Affected Files Table
  doc.font('Helvetica-Bold').fontSize(14)
    .text('Affected Files', { underline: true });
  doc.moveDown(0.5);

  if (data.affectedFiles.length === 0) {
    doc.font('Helvetica-Oblique').fontSize(11)
      .text('No files were processed during this operation.');
  } else {
    const tableTop = doc.y;
    const tableLeft = 40;
    const colWidths = [250, 100, 100];
    const rowHeight = 20;

    // Table Header
    doc.font('Helvetica-Bold').fontSize(11);
    doc.text('File Name', tableLeft, tableTop, { width: colWidths[0], align: 'left' });
    doc.text('Size (bytes)', tableLeft + colWidths[0], tableTop, { width: colWidths[1], align: 'center' });
    doc.text('Status', tableLeft + colWidths[0] + colWidths[1], tableTop, { width: colWidths[2], align: 'center' });

    // Table Header Line
    doc.moveTo(tableLeft, tableTop + 15).lineTo(570, tableTop + 15).stroke('#2E2E2E');

    // Table Rows
    doc.font('Helvetica').fontSize(10);
    data.affectedFiles.forEach((file, index) => {
      const y = tableTop + 20 + (index * rowHeight);
      const stats = fs.existsSync(file) ? fs.statSync(file) : { size: 'N/A' };
      doc.text(file, tableLeft, y, { width: colWidths[0], align: 'left' });
      doc.text(stats.size.toString(), tableLeft + colWidths[0], y, { width: colWidths[1], align: 'center' });
      doc.text(data.operation === 'encrypt' ? 'Encrypted' : 'Decrypted', tableLeft + colWidths[0] + colWidths[1], y, { width: colWidths[2], align: 'center' });
      doc.moveTo(tableLeft, y + 15).lineTo(570, y + 15).stroke('#D3D3D3');
    });
  }

  // Log Entries (on new page if needed)
  doc.addPage();
  doc.font('Helvetica-Bold').fontSize(14)
    .text('Operation Log', { underline: true });
  doc.moveDown(0.5);
  doc.font('Helvetica').fontSize(10);
  if (data.logEntries.length === 0) {
    doc.text('No log entries recorded.');
  } else {
    data.logEntries.forEach(entry => {
      doc.text(entry);
    });
  }

  // Footer on all pages
  doc.on('pageAdded', () => {
    doc.moveTo(40, doc.page.height - 60).lineTo(570, doc.page.height - 60).stroke('#D3D3D3');
    doc.font('Helvetica').fontSize(8).fillColor('#666666')
      .text(`Generated by @hacker0x1-sh/fencryptor | Page ${doc.bufferedPageRange().start + 1}`, 40, doc.page.height - 50, { align: 'center' });
  });
  doc.moveTo(40, doc.page.height - 60).lineTo(570, doc.page.height - 60).stroke('#D3D3D3');
  doc.fontSize(8).fillColor('#666666')
    .text('Generated by @hacker0x1-sh/fencryptor | Page 1', 40, doc.page.height - 50, { align: 'center' });

  doc.end();

  // Generate Log File
  const logPath = path.join(reportFolder, logFilename);
  const logContent = [
    `Operation: ${data.operation.toUpperCase()}`,
    `Target Path: ${data.targetPath}`,
    `Timestamp: ${data.timestamp.toLocaleString()}`,
    `Tool Directory: ${toolDir}`,
    `Total Files: ${data.affectedFiles.length}`,
    `Execution Time: ${data.executionTime.toFixed(2)} seconds`,
    `User: ${os.userInfo().username}`,
    `System: ${os.platform()} ${os.release()}`,
    `Affected Files:`,
    ...(data.affectedFiles.length ? data.affectedFiles.map(f => `- ${f}`) : ['- None']),
    '',
    'Log Entries:',
    ...(data.logEntries.length ? data.logEntries : ['- No additional log entries'])
  ].join('\n');
  fs.writeFileSync(logPath, logContent);

  // Generate Information File (README.txt)
  const infoPath = path.join(reportFolder, infoFilename);
  const infoContent = `
Fencryptor Report Information
Generated on: ${data.timestamp.toLocaleString()}

This folder contains a report of an ${data.operation} operation performed by fencryptor.

Files in this folder:
- fencryptor-report.pdf: A detailed PDF report with operation summary, affected files table, and logs.
- fencryptor-report.log: A log file with operation details and execution logs.
- README.txt: This file, providing information about the report.

Operation Details:
- Operation Type: ${data.operation.toUpperCase()}
- Target Path: ${data.targetPath}
- Total Files Processed: ${data.affectedFiles.length}
- Execution Time: ${data.executionTime.toFixed(2)} seconds
- Affected Files: ${data.affectedFiles.length ? data.affectedFiles.join(', ') : 'None'}

About fencryptor:
fencryptor is a CLI tool to encrypt and decrypt files or folders using AES-256-CBC encryption.
- Source: https://github.com/Hacker0x1-sh/fencryptor
- Install: npm install -g fencryptor
- Usage: Run 'fencryptor --help' for command details.

For support or issues, visit: https://github.com/Hacker0x1-sh/fencryptor/issues
  `;
  fs.writeFileSync(infoPath, infoContent.trim());

  return pdfPath;
}